diff -urN a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2021-08-04 08:38:33.524931070 -0300
+++ b/CMakeLists.txt	2021-08-04 08:39:37.680983993 -0300
@@ -127,6 +127,7 @@
 # Optimization / internal linking preferences
 
 option(OCIO_USE_SSE "Specify whether to enable SSE CPU performance optimizations" ON)
+option(OCIO_USE_ILMBASE "Specify whether to use an OpenEXR/IlmBase install of the Half library (<=v2.5) instead of the newer Imath library (>=v3.0)" OFF)
 option(OCIO_INLINES_HIDDEN "Specify whether to build with -fvisibility-inlines-hidden" ${UNIX})
 
 
diff -urN a/share/cmake/modules/FindExtPackages.cmake b/share/cmake/modules/FindExtPackages.cmake
--- a/share/cmake/modules/FindExtPackages.cmake	2021-08-04 08:38:33.540931083 -0300
+++ b/share/cmake/modules/FindExtPackages.cmake	2021-08-04 09:14:42.050978963 -0300
@@ -32,14 +32,28 @@
 # https://github.com/jbeder/yaml-cpp
 find_package(yaml-cpp 0.6.3 REQUIRED)
 
-# Half (OpenEXR/IlmBase)
-# https://github.com/openexr/openexr
-find_package(Half 2.4.0 REQUIRED)
-
 # pystring
 # https://github.com/imageworks/pystring
 find_package(pystring 1.1.3 REQUIRED)
 
+# Half
+if(NOT OCIO_USE_ILMBASE)
+
+    # Imath (>=3.0)
+    # https://github.com/AcademySoftwareFoundation/Imath
+    find_package(Imath 3.0.5 REQUIRED)
+
+    set(OCIO_HALF_LIB Imath::Imath CACHE STRING "Half library target" FORCE)
+else()
+
+    # OpenEXR/IlmBase (<=2.5)
+    # https://github.com/AcademySoftwareFoundation/openexr
+    find_package(Half 2.4.0 REQUIRED)
+
+    set(OCIO_HALF_LIB IlmBase::Half CACHE STRING "Half library target" FORCE)
+endif()
+
+
 if(OCIO_BUILD_APPS)
 
     # NOTE: Depending of the compiler version lcms2 2.2 does not compile with 
diff -urN a/share/cmake/modules/FindHalf.cmake b/share/cmake/modules/FindHalf.cmake
--- a/share/cmake/modules/FindHalf.cmake	2021-08-04 08:38:33.540931083 -0300
+++ b/share/cmake/modules/FindHalf.cmake	2021-08-04 08:47:23.005365374 -0300
@@ -48,13 +48,13 @@
         # Find include directory
         find_path(Half_INCLUDE_DIR
             NAMES
-                OpenEXR/half.h
+                half.h
             HINTS
                 ${Half_ROOT}
                 ${PC_Half_INCLUDE_DIRS}
             PATH_SUFFIXES
                 include
-                OpenEXR/include
+                include/OpenEXR
         )
 
         # Lib names to search for
@@ -91,10 +91,10 @@
 
         # Get version from config header file
         if(Half_INCLUDE_DIR)
-            if(EXISTS "${Half_INCLUDE_DIR}/OpenEXR/IlmBaseConfig.h")
-                set(_Half_CONFIG "${Half_INCLUDE_DIR}/OpenEXR/IlmBaseConfig.h")
-            elseif(EXISTS "${Half_INCLUDE_DIR}/OpenEXR/OpenEXRConfig.h")
-                set(_Half_CONFIG "${Half_INCLUDE_DIR}/OpenEXR/OpenEXRConfig.h")
+            if(EXISTS "${Half_INCLUDE_DIR}/IlmBaseConfig.h")
+                set(_Half_CONFIG "${Half_INCLUDE_DIR}/IlmBaseConfig.h")
+            elseif(EXISTS "${Half_INCLUDE_DIR}/OpenEXRConfig.h")
+                set(_Half_CONFIG "${Half_INCLUDE_DIR}/OpenEXRConfig.h")
             endif()
         endif()
 
@@ -149,7 +149,7 @@
     # Set find_package standard args
     set(Half_FOUND TRUE)
     set(Half_VERSION ${Half_FIND_VERSION})
-    set(Half_INCLUDE_DIR "${_EXT_DIST_ROOT}/${CMAKE_INSTALL_INCLUDEDIR}")
+	set(Half_INCLUDE_DIR "${_EXT_DIST_ROOT}/${CMAKE_INSTALL_INCLUDEDIR}/OpenEXR")
 
     # Set the expected library name. "_d" is appended to Debug Windows builds 
     # <= OpenEXR 2.3.0. In newer versions, it is appended to Debug libs on
@@ -195,7 +195,7 @@
         file(MAKE_DIRECTORY ${Half_INCLUDE_DIR})
 
         ExternalProject_Add(ilmbase_install
-            GIT_REPOSITORY "https://github.com/openexr/openexr.git"
+            GIT_REPOSITORY "https://github.com/AcademySoftwareFoundation/openexr.git"
             GIT_TAG "v${Half_VERSION}"
             GIT_CONFIG advice.detachedHead=false
             GIT_SHALLOW TRUE
diff -urN a/share/cmake/modules/FindImath.cmake b/share/cmake/modules/FindImath.cmake
--- a/share/cmake/modules/FindImath.cmake	1969-12-31 21:00:00.000000000 -0300
+++ b/share/cmake/modules/FindImath.cmake	2021-08-04 08:52:01.581591830 -0300
@@ -0,0 +1,222 @@
+# SPDX-License-Identifier: BSD-3-Clause
+# Copyright Contributors to the OpenColorIO Project.
+#
+# Locate or install Imath
+#
+# Variables defined by this module:
+#   Imath_FOUND - If FALSE, do not try to link to ilmbase
+#   Imath_LIBRARY - Imath library to link to
+#   Imath_INCLUDE_DIR - Where to find ImathConfig.h
+#   Imath_VERSION - The version of the library
+#
+# Targets defined by this module:
+#   Imath::Imath - IMPORTED target, if found
+#
+# By default, the dynamic libraries of Imath will be found. To find the 
+# static ones instead, you must set the Imath_STATIC_LIBRARY variable to 
+# TRUE before calling find_package(Imath ...).
+#
+# If Imath is not installed in a standard path, you can use the 
+# Imath_ROOT variable to tell CMake where to find it. If it is not found 
+# and OCIO_INSTALL_EXT_PACKAGES is set to MISSING or ALL, Imath will be 
+# downloaded, built, and statically-linked into libOpenColorIO at build time.
+#
+
+# Imath components may have the version in their name
+set(_Imath_LIB_VER "${Imath_FIND_VERSION_MAJOR}_${Imath_FIND_VERSION_MINOR}")
+
+###############################################################################
+### Try to find package ###
+
+if(NOT OCIO_INSTALL_EXT_PACKAGES STREQUAL ALL)
+    set(_Imath_REQUIRED_VARS Imath_LIBRARY)
+
+    if(NOT DEFINED Imath_ROOT)
+        # Search for ImathConfig.cmake
+        find_package(Imath ${Imath_FIND_VERSION} CONFIG QUIET)
+    endif()
+
+    if(Imath_FOUND)
+        get_target_property(Imath_LIBRARY Imath::Imath LOCATION)
+    else()
+        list(APPEND _Imath_REQUIRED_VARS Imath_INCLUDE_DIR)
+
+        # Search for Imath.pc
+        find_package(PkgConfig QUIET)
+        pkg_check_modules(PC_Imath QUIET "Imath>=${Imath_FIND_VERSION}")
+
+        # Find include directory
+        find_path(Imath_INCLUDE_DIR
+            NAMES
+                ImathConfig.h
+            HINTS
+                ${Imath_ROOT}
+                ${PC_Imath_INCLUDE_DIRS}
+            PATH_SUFFIXES
+                include
+                include/Imath
+                Imath/include
+        )
+
+        # Lib names to search for
+        set(_Imath_LIB_NAMES "Imath-${_Imath_LIB_VER}" Imath)
+        if(BUILD_TYPE_DEBUG)
+            # Prefer Debug lib names
+            list(INSERT _Imath_LIB_NAMES 0 "Imath-${_Imath_LIB_VER}_d")
+        endif()
+
+        if(Imath_STATIC_LIBRARY)
+            # Prefer static lib names
+            set(_Imath_STATIC_LIB_NAMES 
+                "${CMAKE_STATIC_LIBRARY_PREFIX}Imath-${_Imath_LIB_VER}${CMAKE_STATIC_LIBRARY_SUFFIX}"
+                "${CMAKE_STATIC_LIBRARY_PREFIX}Imath${CMAKE_STATIC_LIBRARY_SUFFIX}"
+            )
+            if(BUILD_TYPE_DEBUG)
+                # Prefer static Debug lib names
+                list(INSERT _Imath_STATIC_LIB_NAMES 0
+                    "${CMAKE_STATIC_LIBRARY_PREFIX}Imath-${_Imath_LIB_VER}_d${CMAKE_STATIC_LIBRARY_SUFFIX}")
+            endif()
+        endif()
+
+        # Find library
+        find_library(Imath_LIBRARY
+            NAMES
+                ${_Imath_STATIC_LIB_NAMES} 
+                ${_Imath_LIB_NAMES}
+            HINTS
+                ${Imath_ROOT}
+                ${PC_Imath_LIBRARY_DIRS}
+            PATH_SUFFIXES
+                lib64 lib 
+        )
+
+        # Get version from config header file
+        if(Imath_INCLUDE_DIR)
+            if(EXISTS "${Imath_INCLUDE_DIR}/ImathConfig.h")
+                set(_Imath_CONFIG "${Imath_INCLUDE_DIR}/ImathConfig.h")
+            endif()
+        endif()
+
+        if(_Imath_CONFIG)
+            file(STRINGS "${_Imath_CONFIG}" _Imath_VER_SEARCH 
+                REGEX "^[ \t]*#define[ \t]+IMATH_VERSION_STRING[ \t]+\"[.0-9]+\".*$")
+            if(_Imath_VER_SEARCH)
+                string(REGEX REPLACE ".*#define[ \t]+IMATH_VERSION_STRING[ \t]+\"([.0-9]+)\".*" 
+                    "\\1" Imath_VERSION "${_Imath_VER_SEARCH}")
+            endif()
+        elseif(PC_Imath_FOUND)
+            set(Imath_VERSION "${PC_Imath_VERSION}")
+        endif()
+    endif()
+
+    # Override REQUIRED if package can be installed
+    if(OCIO_INSTALL_EXT_PACKAGES STREQUAL MISSING)
+        set(Imath_FIND_REQUIRED FALSE)
+    endif()
+
+    include(FindPackageHandleStandardArgs)
+    find_package_handle_standard_args(Imath
+        REQUIRED_VARS 
+            ${_Imath_REQUIRED_VARS}
+        VERSION_VAR
+            Imath_VERSION
+    )
+endif()
+
+###############################################################################
+### Create target
+
+if (NOT TARGET Imath::Imath)
+    add_library(Imath::Imath UNKNOWN IMPORTED GLOBAL)
+    set(_Imath_TARGET_CREATE TRUE)
+endif()
+
+###############################################################################
+### Install package from source ###
+
+if(NOT Imath_FOUND)
+    include(ExternalProject)
+    include(GNUInstallDirs)
+
+    set(_EXT_DIST_ROOT "${CMAKE_BINARY_DIR}/ext/dist")
+    set(_EXT_BUILD_ROOT "${CMAKE_BINARY_DIR}/ext/build")
+
+    # Set find_package standard args
+    set(Imath_FOUND TRUE)
+    set(Imath_VERSION ${Imath_FIND_VERSION})
+    set(Imath_INCLUDE_DIR "${_EXT_DIST_ROOT}/${CMAKE_INSTALL_INCLUDEDIR}/Imath")
+
+    # Set the expected library name. "_d" is appended to Debug Windows builds 
+    # <= OpenEXR 2.3.0. In newer versions, it is appended to Debug libs on
+    # all platforms.
+    if(BUILD_TYPE_DEBUG)
+        set(_Imath_LIB_SUFFIX "_d")
+    endif()
+
+    set(Imath_LIBRARY
+        "${_EXT_DIST_ROOT}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}Imath-${_Imath_LIB_VER}${_Imath_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
+
+    if(_Imath_TARGET_CREATE)
+        if(MSVC)
+            set(Imath_CXX_FLAGS "${Imath_CXX_FLAGS} /EHsc")
+        endif()
+
+        string(STRIP "${Imath_CXX_FLAGS}" Imath_CXX_FLAGS)
+ 
+        set(Imath_CMAKE_ARGS
+            ${Imath_CMAKE_ARGS}
+            -DCMAKE_CXX_VISIBILITY_PRESET=${CMAKE_CXX_VISIBILITY_PRESET}
+            -DCMAKE_VISIBILITY_INLINES_HIDDEN=${CMAKE_VISIBILITY_INLINES_HIDDEN}
+            -DCMAKE_POSITION_INDEPENDENT_CODE=ON
+            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
+            -DCMAKE_CXX_FLAGS=${Imath_CXX_FLAGS}
+            -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
+            -DCMAKE_INSTALL_MESSAGE=${CMAKE_INSTALL_MESSAGE}
+            -DCMAKE_INSTALL_PREFIX=${_EXT_DIST_ROOT}
+            -DCMAKE_OBJECT_PATH_MAX=${CMAKE_OBJECT_PATH_MAX}
+            -DBUILD_SHARED_LIBS=OFF
+            -DBUILD_TESTING=OFF
+            -DPYTHON=OFF
+            -DIMATH_HALF_USE_LOOKUP_TABLE=OFF
+        )
+
+        if(CMAKE_TOOLCHAIN_FILE)
+            set(Imath_CMAKE_ARGS
+                ${Imath_CMAKE_ARGS} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE})
+        endif()
+
+        if(APPLE)
+            set(Imath_CMAKE_ARGS
+                ${Imath_CMAKE_ARGS} -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET})
+        endif()
+
+        # Hack to let imported target be built from ExternalProject_Add
+        file(MAKE_DIRECTORY ${Imath_INCLUDE_DIR})
+
+        ExternalProject_Add(imath_install
+            GIT_REPOSITORY "https://github.com/AcademySoftwareFoundation/Imath.git"
+            GIT_TAG "v${Imath_VERSION}"
+            GIT_CONFIG advice.detachedHead=false
+            GIT_SHALLOW TRUE
+            PREFIX "${_EXT_BUILD_ROOT}/Imath"
+            BUILD_BYPRODUCTS ${Imath_LIBRARY}
+            CMAKE_ARGS ${Imath_CMAKE_ARGS}
+            EXCLUDE_FROM_ALL TRUE
+        )
+
+        add_dependencies(Imath::Imath imath_install)
+        message(STATUS "Installing Imath: ${Imath_LIBRARY} (version \"${Imath_VERSION}\")")
+    endif()
+endif()
+
+###############################################################################
+### Configure target ###
+
+if(_Imath_TARGET_CREATE)
+    set_target_properties(Imath::Imath PROPERTIES
+        IMPORTED_LOCATION ${Imath_LIBRARY}
+        INTERFACE_INCLUDE_DIRECTORIES ${Imath_INCLUDE_DIR}
+    )
+
+    mark_as_advanced(Imath_INCLUDE_DIR Imath_LIBRARY Imath_VERSION)
+endif()
diff -urN a/src/OpenColorIO/BitDepthUtils.h b/src/OpenColorIO/BitDepthUtils.h
--- a/src/OpenColorIO/BitDepthUtils.h	2021-08-04 08:38:33.540931083 -0300
+++ b/src/OpenColorIO/BitDepthUtils.h	2021-08-04 08:53:28.217661986 -0300
@@ -7,7 +7,7 @@
 
 #include <OpenColorIO/OpenColorIO.h>
 
-#include "OpenEXR/half.h"
+#include "half.h"
 
 
 namespace OCIO_NAMESPACE
diff -urN a/src/OpenColorIO/CMakeLists.txt b/src/OpenColorIO/CMakeLists.txt
--- a/src/OpenColorIO/CMakeLists.txt	2021-08-04 08:38:33.540931083 -0300
+++ b/src/OpenColorIO/CMakeLists.txt	2021-08-04 08:54:37.057717639 -0300
@@ -207,7 +207,7 @@
 		public_api
 	PRIVATE
 		expat::expat
-		IlmBase::Half
+		${OCIO_HALF_LIB}
 		pystring::pystring
 		sampleicc::sampleicc
 		utils::strings
diff -urN a/src/OpenColorIO/MathUtils.h b/src/OpenColorIO/MathUtils.h
--- a/src/OpenColorIO/MathUtils.h	2021-08-04 08:38:33.540931083 -0300
+++ b/src/OpenColorIO/MathUtils.h	2021-08-04 08:54:59.285735588 -0300
@@ -9,7 +9,7 @@
 
 #include <OpenColorIO/OpenColorIO.h>
 
-#include "OpenEXR/half.h"
+#include "half.h"
 
 namespace OCIO_NAMESPACE
 {
diff -urN a/src/OpenColorIO/ops/range/RangeOp.cpp b/src/OpenColorIO/ops/range/RangeOp.cpp
--- a/src/OpenColorIO/ops/range/RangeOp.cpp	2021-08-04 08:38:33.544931086 -0300
+++ b/src/OpenColorIO/ops/range/RangeOp.cpp	2021-08-04 08:55:48.989775706 -0300
@@ -7,7 +7,7 @@
 #include <OpenColorIO/OpenColorIO.h>
 
 #include "GpuShaderUtils.h"
-#include "OpenEXR/half.h"
+#include "half.h"
 #include "HashUtils.h"
 #include "MathUtils.h"
 #include "ops/lut1d/Lut1DOpData.h"
diff -urN a/src/OpenColorIO/transforms/builtins/ACES.cpp b/src/OpenColorIO/transforms/builtins/ACES.cpp
--- a/src/OpenColorIO/transforms/builtins/ACES.cpp	2021-08-04 08:38:33.548931090 -0300
+++ b/src/OpenColorIO/transforms/builtins/ACES.cpp	2021-08-04 08:56:33.721811779 -0300
@@ -6,7 +6,7 @@
 
 #include <OpenColorIO/OpenColorIO.h>
 
-#include "OpenEXR/half.h"
+#include "half.h"
 #include "ops/fixedfunction/FixedFunctionOp.h"
 #include "ops/gradingrgbcurve/GradingRGBCurveOp.h"
 #include "ops/log/LogOp.h"
diff -urN a/src/OpenColorIO/transforms/builtins/OpHelpers.cpp b/src/OpenColorIO/transforms/builtins/OpHelpers.cpp
--- a/src/OpenColorIO/transforms/builtins/OpHelpers.cpp	2021-08-04 08:38:33.548931090 -0300
+++ b/src/OpenColorIO/transforms/builtins/OpHelpers.cpp	2021-08-04 08:57:08.737839996 -0300
@@ -4,7 +4,7 @@
 
 #include <OpenColorIO/OpenColorIO.h>
 
-#include "OpenEXR/half.h"
+#include "half.h"
 #include "ops/lut1d/Lut1DOp.h"
 #include "transforms/builtins/OpHelpers.h"
 
diff -urN a/src/apps/ocioconvert/CMakeLists.txt b/src/apps/ocioconvert/CMakeLists.txt
--- a/src/apps/ocioconvert/CMakeLists.txt	2021-08-04 08:38:33.548931090 -0300
+++ b/src/apps/ocioconvert/CMakeLists.txt	2021-08-04 08:58:16.113894240 -0300
@@ -27,7 +27,7 @@
 target_link_libraries(ocioconvert
     PRIVATE
         apputils
-        IlmBase::Half
+        ${OCIO_HALF_LIB}
         ${OCIO_GL_LIB}
         oiiohelpers
         OpenColorIO
diff -urN a/src/apps/ocioconvert/main.cpp b/src/apps/ocioconvert/main.cpp
--- a/src/apps/ocioconvert/main.cpp	2021-08-04 08:38:33.548931090 -0300
+++ b/src/apps/ocioconvert/main.cpp	2021-08-04 08:58:48.297920123 -0300
@@ -24,7 +24,7 @@
 #endif // OCIO_GPU_ENABLED
 
 #include "oiiohelpers.h"
-#include "OpenEXR/half.h"
+#include "half.h"
 
 
 // Array of non OpenColorIO arguments.
diff -urN a/src/apps/ocioperf/CMakeLists.txt b/src/apps/ocioperf/CMakeLists.txt
--- a/src/apps/ocioperf/CMakeLists.txt	2021-08-04 08:38:33.548931090 -0300
+++ b/src/apps/ocioperf/CMakeLists.txt	2021-08-04 08:59:35.737958260 -0300
@@ -20,7 +20,7 @@
 target_link_libraries(ocioperf
     PRIVATE
         apputils
-        IlmBase::Half
+        ${OCIO_HALF_LIB}
         oiiohelpers
         OpenColorIO
         OpenImageIO::OpenImageIO
diff -urN a/src/apps/ocioperf/main.cpp b/src/apps/ocioperf/main.cpp
--- a/src/apps/ocioperf/main.cpp	2021-08-04 08:38:33.548931090 -0300
+++ b/src/apps/ocioperf/main.cpp	2021-08-04 08:59:52.625971825 -0300
@@ -11,7 +11,7 @@
 #endif
 
 #include "apputils/argparse.h"
-#include "OpenEXR/half.h"
+#include "half.h"
 #include "oiiohelpers.h"
 #include "utils/StringUtils.h"
 
diff -urN a/src/libutils/oiiohelpers/CMakeLists.txt b/src/libutils/oiiohelpers/CMakeLists.txt
--- a/src/libutils/oiiohelpers/CMakeLists.txt	2021-08-04 08:38:33.552931093 -0300
+++ b/src/libutils/oiiohelpers/CMakeLists.txt	2021-08-04 09:01:42.022059605 -0300
@@ -31,7 +31,7 @@
 
     PRIVATE
         OpenColorIO
-        IlmBase::Half
+        ${OCIO_HALF_LIB}
         utils::strings
 )
 
diff -urN a/src/libutils/oiiohelpers/oiiohelpers.cpp b/src/libutils/oiiohelpers/oiiohelpers.cpp
--- a/src/libutils/oiiohelpers/oiiohelpers.cpp	2021-08-04 08:38:33.552931093 -0300
+++ b/src/libutils/oiiohelpers/oiiohelpers.cpp	2021-08-04 09:02:08.246080627 -0300
@@ -5,7 +5,7 @@
 #include <OpenColorIO/OpenColorIO.h>
 
 
-#include "OpenEXR/half.h"
+#include "half.h"
 #include "oiiohelpers.h"
 #include "utils/StringUtils.h"
 
diff -urN a/tests/cpu/CMakeLists.txt b/tests/cpu/CMakeLists.txt
--- a/tests/cpu/CMakeLists.txt	2021-08-04 08:38:33.552931093 -0300
+++ b/tests/cpu/CMakeLists.txt	2021-08-04 09:03:50.662162603 -0300
@@ -18,7 +18,7 @@
             public_api
         PRIVATE
             expat::expat
-            IlmBase::Half
+            ${OCIO_HALF_LIB}
             pystring::pystring
             sampleicc::sampleicc
             unittest_data
